// Code generated by MockGen. DO NOT EDIT.
// Source: userHandler.go

// Package mock is a generated GoMock package.
package mock

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserHandler is a mock of UserHandler interface
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockUserHandler) Save(c *gin.Context) {
	m.ctrl.Call(m, "Save", c)
}

// Save indicates an expected call of Save
func (mr *MockUserHandlerMockRecorder) Save(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserHandler)(nil).Save), c)
}

// Update mocks base method
func (m *MockUserHandler) Update(c *gin.Context) {
	m.ctrl.Call(m, "Update", c)
}

// Update indicates an expected call of Update
func (mr *MockUserHandlerMockRecorder) Update(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserHandler)(nil).Update), c)
}

// Paginate mocks base method
func (m *MockUserHandler) Paginate(c *gin.Context) {
	m.ctrl.Call(m, "Paginate", c)
}

// Paginate indicates an expected call of Paginate
func (mr *MockUserHandlerMockRecorder) Paginate(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockUserHandler)(nil).Paginate), c)
}

// Delete mocks base method
func (m *MockUserHandler) Delete(c *gin.Context) {
	m.ctrl.Call(m, "Delete", c)
}

// Delete indicates an expected call of Delete
func (mr *MockUserHandlerMockRecorder) Delete(c interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserHandler)(nil).Delete), c)
}
