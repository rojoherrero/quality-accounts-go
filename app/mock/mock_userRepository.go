// Code generated by MockGen. DO NOT EDIT.
// Source: userRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/rojoherrero/quality-accounts/app/model"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockUserRepository) Save(ctx context.Context, user model.UserCreationDto) error {
	ret := m.ctrl.Call(m, "Save", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUserRepositoryMockRecorder) Save(ctx, user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), ctx, user)
}

// Update mocks base method
func (m *MockUserRepository) Update(ctx context.Context, user model.UserCreationDto) error {
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// Paginate mocks base method
func (m *MockUserRepository) Paginate(ctx context.Context, start, end int64) (model.PropertyMapSlice, error) {
	ret := m.ctrl.Call(m, "Paginate", ctx, start, end)
	ret0, _ := ret[0].(model.PropertyMapSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paginate indicates an expected call of Paginate
func (mr *MockUserRepositoryMockRecorder) Paginate(ctx, start, end interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockUserRepository)(nil).Paginate), ctx, start, end)
}

// Delete mocks base method
func (m *MockUserRepository) Delete(ctx context.Context, code string) error {
	ret := m.ctrl.Call(m, "Delete", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, code interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, code)
}

// GetLogInData mocks base method
func (m *MockUserRepository) GetLogInData(ctx context.Context, username string) error {
	ret := m.ctrl.Call(m, "GetLogInData", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLogInData indicates an expected call of GetLogInData
func (mr *MockUserRepositoryMockRecorder) GetLogInData(ctx, username interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogInData", reflect.TypeOf((*MockUserRepository)(nil).GetLogInData), ctx, username)
}
