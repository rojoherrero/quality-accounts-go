// Code generated by MockGen. DO NOT EDIT.
// Source: departmentHandler.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockDepartmentHandler is a mock of DepartmentHandler interface
type MockDepartmentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentHandlerMockRecorder
}

// MockDepartmentHandlerMockRecorder is the mock recorder for MockDepartmentHandler
type MockDepartmentHandlerMockRecorder struct {
	mock *MockDepartmentHandler
}

// NewMockDepartmentHandler creates a new mock instance
func NewMockDepartmentHandler(ctrl *gomock.Controller) *MockDepartmentHandler {
	mock := &MockDepartmentHandler{ctrl: ctrl}
	mock.recorder = &MockDepartmentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDepartmentHandler) EXPECT() *MockDepartmentHandlerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockDepartmentHandler) Save(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "Save", w, r)
}

// Save indicates an expected call of Save
func (mr *MockDepartmentHandlerMockRecorder) Save(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDepartmentHandler)(nil).Save), w, r)
}

// Update mocks base method
func (m *MockDepartmentHandler) Update(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "Update", w, r)
}

// Update indicates an expected call of Update
func (mr *MockDepartmentHandlerMockRecorder) Update(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepartmentHandler)(nil).Update), w, r)
}

// Paginate mocks base method
func (m *MockDepartmentHandler) Paginate(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "Paginate", w, r)
}

// Paginate indicates an expected call of Paginate
func (mr *MockDepartmentHandlerMockRecorder) Paginate(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockDepartmentHandler)(nil).Paginate), w, r)
}

// Delete mocks base method
func (m *MockDepartmentHandler) Delete(w http.ResponseWriter, r *http.Request) {
	m.ctrl.Call(m, "Delete", w, r)
}

// Delete indicates an expected call of Delete
func (mr *MockDepartmentHandlerMockRecorder) Delete(w, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDepartmentHandler)(nil).Delete), w, r)
}
