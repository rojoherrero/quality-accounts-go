// Code generated by MockGen. DO NOT EDIT.
// Source: departmentRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/rojoherrero/quality-accounts/app/model"
	reflect "reflect"
)

// MockDepartmentRepository is a mock of DepartmentRepository interface
type MockDepartmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentRepositoryMockRecorder
}

// MockDepartmentRepositoryMockRecorder is the mock recorder for MockDepartmentRepository
type MockDepartmentRepositoryMockRecorder struct {
	mock *MockDepartmentRepository
}

// NewMockDepartmentRepository creates a new mock instance
func NewMockDepartmentRepository(ctrl *gomock.Controller) *MockDepartmentRepository {
	mock := &MockDepartmentRepository{ctrl: ctrl}
	mock.recorder = &MockDepartmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDepartmentRepository) EXPECT() *MockDepartmentRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockDepartmentRepository) Save(dep model.RoleDepartment) error {
	ret := m.ctrl.Call(m, "Save", dep)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockDepartmentRepositoryMockRecorder) Save(dep interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDepartmentRepository)(nil).Save), dep)
}

// Update mocks base method
func (m *MockDepartmentRepository) Update(data model.RoleDepartmentUpdate) error {
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDepartmentRepositoryMockRecorder) Update(data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepartmentRepository)(nil).Update), data)
}

// Paginate mocks base method
func (m *MockDepartmentRepository) Paginate(start, end int) (model.RolesDepartments, error) {
	ret := m.ctrl.Call(m, "Paginate", start, end)
	ret0, _ := ret[0].(model.RolesDepartments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paginate indicates an expected call of Paginate
func (mr *MockDepartmentRepositoryMockRecorder) Paginate(start, end interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockDepartmentRepository)(nil).Paginate), start, end)
}

// Delete mocks base method
func (m *MockDepartmentRepository) Delete(code string) error {
	ret := m.ctrl.Call(m, "Delete", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDepartmentRepositoryMockRecorder) Delete(code interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDepartmentRepository)(nil).Delete), code)
}
